{"version":3,"file":"static/js/486.c16f9de6.chunk.js","mappings":"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","sources":["components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","redux/filter/slice.js","components/Filter/Filter.jsx","redux/contacts/operations.js","components/InputForm/InputForm.jsx","pages/Contacts.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  return (\n    <>\n      <div>\n        <p>{name}</p>\n        <p>{number}</p>\n      </div>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactListItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ul>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = '';\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    setFilter: {\n      reducer(state, { payload }) {\n        return (state = payload);\n      },\n    },\n  },\n});\n\nexport const filterReducer = filterSlice.reducer;\nexport const { setFilter } = filterSlice.actions;\n","import { useDispatch } from 'react-redux';\n\nimport { setFilter } from 'redux/filter/slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handlerFilterChange = evt => {\n    dispatch(setFilter(evt?.target?.value));\n  };\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        title=\"Filter is case unsensitive.\"\n        required\n        onChange={handlerFilterChange}\n      />\n    </label>\n  );\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchAll',\n  async (_, thunkAPI) => {\n    try {\n      const response = await axios.get('/contacts');\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async (contact, thunkAPI) => {\n    try {\n      const response = await axios.post('/contacts', contact);\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (contactId, thunkAPI) => {\n    try {\n      const response = await axios.delete(`/contacts/${contactId}`);\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const editContact = createAsyncThunk(\n  'contacts/editContact',\n  async ({ id, name, number }, thunkAPI) => {\n    try {\n      const response = await axios.patch(`/contacts/${id}`, {\n        name,\n        number,\n      });\n\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations.js';\nimport { selectContacts } from 'redux/contacts/selectors.js';\n\nexport const InputForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const form = evt?.target;\n    const { name, number } = form.elements;\n    const contactName = name.value.trim();\n    const contactPhone = number.value.trim();\n\n    if (\n      !contacts.some(\n        contact =>\n          contact.name.toLowerCase().trim() === contactName.toLowerCase()\n      )\n    ) {\n      form.reset();\n\n      dispatch(addContact({ name: contactName, number: contactPhone }));\n    } else {\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          autoComplete=\"off\"\n        />\n      </label>\n      <label>\n        Phone\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          autoComplete=\"off\"\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { useContacts } from 'components/hooks';\n\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { InputForm } from 'components/InputForm/InputForm';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const { isLoading, error } = useContacts();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <InputForm />\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactListItem","id","name","number","ContactList","visibleContacts","useSelector","selectVisibleContacts","map","filterSlice","createSlice","initialState","reducers","setFilter","reducer","state","payload","actions","Filter","dispatch","useDispatch","type","title","required","onChange","evt","target","value","fetchContacts","createAsyncThunk","_","thunkAPI","axios","response","data","rejectWithValue","message","addContact","contact","InputForm","contactId","contacts","selectContacts","onSubmit","preventDefault","form","elements","contactName","trim","contactPhone","some","toLowerCase","reset","pattern","autoComplete","useContacts","isLoading","error","useEffect","Loader"],"sourceRoot":""}